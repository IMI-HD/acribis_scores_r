# Load necessary libraries
library(dplyr)
library(readr)
library(purrr)

# Define the paths to the CSV files using relative paths
base_path <- "resources/"  # Folder name containing the CSV files

# File paths
coefficients_death_file <- paste0(base_path, "barcelona_hf_v3_death_coefficients.csv")
coefficients_hosp_file <- paste0(base_path, "barcelona_hf_v3_hosp_coefficients.csv")
coefficients_hosp_death_file <- paste0(base_path, "barcelona_hf_v3_hosp_death_coefficients.csv")
coefficients_life_expectancy_file <- paste0(base_path, "barcelona_hf_v3_life_expectancy_coefficients.csv")
life_expectancy_limits_file <- paste0(base_path, "life_expectancy_limits.csv")

# Enum-like representation in R
Model <- list(
  MODEL_1 = "MODEL_1",
  MODEL_2 = "MODEL_2",
  MODEL_3 = "MODEL_3",
  MODEL_4 = "MODEL_4",
  MODEL_5 = "MODEL_5",
  MODEL_6 = "MODEL_6",
  MODEL_7 = "MODEL_7",
  MODEL_8 = "MODEL_8"
)

# Defining min-max-median values
MIN_MAX_MEDIAN <- tibble(
  lower_limit = c(35, 11, 130, 6.4, 8.8, 21.5017, 3, 18.089, 0.5, 0),
  upper_limit = c(88, 71, 147, 109.7, 17.1, 34800.59, 265.45, 157.074, 246.948, 8),
  median_impute = c(70.3, 34, 139, 51.2, 12.9, 1361.5, 22.6, 38.1, 27, 0)
) %>%
  mutate(parameter = c('Age (years)', 'Ejection fraction (%)', 'Sodium (mmol/L)', 
                       'eGFR in mL/min/1.73m²', 'Hemoglobin (g/dL)', 'NT-proBNP in pg/mL',
                       'hs-cTnT in ng/L', 'ST2 (ng/mL)', 'HF Duration in months',
                       'Hospitalisation Prev. Year')) %>%
  column_to_rownames('parameter')

# Function to check values
check_values <- function(parameter_value, parameter_name, min_max_median) {
  lower_limit <- min_max_median[parameter_name, "lower_limit"]
  upper_limit <- min_max_median[parameter_name, "upper_limit"]
  median_impute <- min_max_median[parameter_name, "median_impute"]
  
  if (is.na(parameter_value)) {
    parameter_value <- ifelse(!is.na(median_impute), median_impute, NA)
  } else if (parameter_value < lower_limit) {
    parameter_value <- lower_limit
  } else if (parameter_value > upper_limit) {
    parameter_value <- upper_limit
  }
  return(parameter_value)
}

# Function to get model
get_model <- function(parameters) {
  if (!is.null(parameters$`NT-proBNP in pg/mL`) && 
      is.null(parameters$`hs-cTnT in ng/L`) && is.null(parameters$`ST2 (ng/mL)`)) {
    model <- Model$MODEL_2
  } else if (!is.null(parameters$`hs-cTnT in ng/L`) && 
             is.null(parameters$`NT-proBNP in pg/mL`) && is.null(parameters$`ST2 (ng/mL)`)) {
    model <- Model$MODEL_3
  } else if (!is.null(parameters$`ST2 (ng/mL)`) && 
             is.null(parameters$`NT-proBNP in pg/mL`) && is.null(parameters$`hs-cTnT in ng/L`)) {
    model <- Model$MODEL_4
  } else if (!is.null(parameters$`NT-proBNP in pg/mL`) && 
             !is.null(parameters$`ST2 (ng/mL)`) && is.null(parameters$`hs-cTnT in ng/L`)) {
    model <- Model$MODEL_5
  } else if (!is.null(parameters$`NT-proBNP in pg/mL`) && 
             !is.null(parameters$`hs-cTnT in ng/L`) && is.null(parameters$`ST2 (ng/mL)`)) {
    model <- Model$MODEL_6
  } else if (!is.null(parameters$`hs-cTnT in ng/L`) && 
             !is.null(parameters$`ST2 (ng/mL)`) && is.null(parameters$`NT-proBNP in pg/mL`)) {
    model <- Model$MODEL_7
  } else if (!is.null(parameters$`NT-proBNP in pg/mL`) && 
             !is.null(parameters$`hs-cTnT in ng/L`) && !is.null(parameters$`ST2 (ng/mL)`)) {
    model <- Model$MODEL_8
  } else {
    model <- Model$MODEL_1
  }
  return(model)
}

# Function to transform new parameters
get_new_parameters <- function(parameters) {
  new_parameters <- parameters
  new_parameters$`NYHA Class` <- ifelse(parameters$`NYHA Class` %in% c(1, 2), 0, 1)
  new_parameters$`Ejection fraction (%)` <- ifelse(parameters$`Ejection fraction (%)` <= 45, 0, 1)
  new_parameters$`log(HF Duration in months)` <- log(parameters$`HF Duration in months`)
  new_parameters$`Furosemide Dose 1` <- ifelse(0 < parameters$`Loop Diuretic Furosemide Dose` && 
                                                 parameters$`Loop Diuretic Furosemide Dose` <= 40, 1, 0)
  new_parameters$`Furosemide Dose 2` <- ifelse(40 < parameters$`Loop Diuretic Furosemide Dose` && 
                                                 parameters$`Loop Diuretic Furosemide Dose` <= 80, 1, 0)
  new_parameters$`Furosemide Dose 3` <- ifelse(parameters$`Loop Diuretic Furosemide Dose` > 80, 1, 0)
  
  if (!is.null(parameters$`NT-proBNP in pg/mL`)) {
    new_parameters$`log(NT-proBNP in pg/mL)` <- ifelse(parameters$`NT-proBNP in pg/mL` == 0, 0, log(parameters$`NT-proBNP in pg/mL`))
  }
  
  if (!is.null(parameters$`hs-cTnT in ng/L`)) {
    new_parameters$`log(hs-cTnT in ng/L)` <- ifelse(parameters$`hs-cTnT in ng/L` == 0, 0, log(parameters$`hs-cTnT in ng/L`))
    new_parameters$`Squared log(hs-cTnT in ng/L)` <- new_parameters$`log(hs-cTnT in ng/L)`^2
  }
  
  if (!is.null(parameters$`ST2 (ng/mL)`)) {
    new_parameters$`ST2_div_10` <- parameters$`ST2 (ng/mL)` / 10
    new_parameters$`Squared ST2_div_10` <- new_parameters$`ST2_div_10`^2
  }
  
  return(new_parameters)
}

# Function to calculate scores for the model
get_scores <- function(file, model, new_parameters) {
  model_coefficients <- read_csv(file)
  
  # Select the coefficients for the given model
  coefficients <- model_coefficients %>%
    filter(Variables != "Sum_Product") %>%
    select(Variables, !!sym(model))
  
  # Extract the sum_product value for the model
  sum_product <- model_coefficients %>%
    filter(Variables == "Sum_Product") %>%
    pull(!!sym(model))
  
  # Calculate the sum of products
  sum_product_all_parameters <- sum(
    sapply(names(new_parameters), function(param) {
      matching_row <- coefficients %>% filter(Variables == param)
      if (nrow(matching_row) > 0) {
        return(new_parameters[[param]] * matching_row[[model]])
      } else {
        return(0)
      }
    })
  )
  
  # Calculate scores for each year (1 to 5)
  scores <- c()
  for (year in 1:5) {
    survival_estimate <- get_survival_estimate(model, year, model_coefficients)
    score <- (1 - (survival_estimate ^ exp(sum_product_all_parameters - sum_product))) * 100
    scores <- c(scores, round(score, 1))
  }
  
  return(scores)
}



# Example call to calculate the Barcelona HF score
parameters <- list(
  `Age (years)` = 60,
  `Female` = TRUE,
  `NYHA Class` = 3,
  `Ejection fraction (%)` = 35,
  `Sodium (mmol/L)` = 140,
  `eGFR in mL/min/1.73m²` = 60,
  `Hemoglobin (g/dL)` = 13.5,
  `Loop Diuretic Furosemide Dose` = 40,
  `Statin` = TRUE,
  `ACEi/ARB` = TRUE,
  `Betablockers` = TRUE,
  `HF Duration in months` = 24,
  `Diabetes Mellitus` = FALSE,
  `Hospitalisation Prev. Year` = 1,
  `MRA` = TRUE,
  `ICD` = FALSE,
  `CRT` = FALSE,
  `ARNI` = FALSE,
  `NT-proBNP in pg/mL` = 1200,
  `hs-cTnT in ng/L` = NA,
  `ST2 (ng/mL)` = NA,
  `SGLT2i` = TRUE
)

# Calculate and print the scores
scores <- calc_barcelona_hf_score(parameters)
print(scores)


