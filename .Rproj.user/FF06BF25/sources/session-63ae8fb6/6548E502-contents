library(dplyr)
library(readr)
library(purrr)

# Enum-like representation in R
Model <- list(
  MODEL_1 = "Basic Clinical Model",
  MODEL_2 = "Basic model with NT-proBNP",
  MODEL_3 = "Basic model with hs-cTnT",
  MODEL_4 = "Basic model with ST2",
  MODEL_5 = "Basic model with NT-proBNP and ST2",
  MODEL_6 = "Basic model with NT-proBNP and hs-cTnT",
  MODEL_7 = "Basic model with hs-cTNT and ST2",
  MODEL_8 = "Basic model with NT-proBNP + hs-cTNT + ST2"
)

# Defining min-max-median values
MIN_MAX_MEDIAN <- tibble(
  lower_limit = c(35, 11, 130, 6.4, 8.8, 21.5017, 3, 18.089, 0.5, 0),
  upper_limit = c(88, 71, 147, 109.7, 17.1, 34800.59, 265.45, 157.074, 246.948, 8),
  median_impute = c(70.3, 34, 139, 51.2, 12.9, 1361.5, 22.6, 38.1, 27, 0)
) %>%
  mutate(parameter = c('Age (years)', 'Ejection fraction (%)', 'Sodium (mmol/L)', 
                       'eGFR in mL/min/1.73mÂ²', 'Hemoglobin (g/dL)', 'NT-proBNP in pg/mL',
                       'hs-cTnT in ng/L', 'ST2 (ng/mL)', 'HF Duration in months',
                       'Hospitalisation Prev. Year')) %>%
  column_to_rownames('parameter')

# Function to check values
check_values <- function(parameter_value, parameter_name, min_max_median) {
  lower_limit <- min_max_median[parameter_name, "lower_limit"]
  upper_limit <- min_max_median[parameter_name, "upper_limit"]
  median_impute <- min_max_median[parameter_name, "median_impute"]
  
  if (is.na(parameter_value)) {
    parameter_value <- ifelse(!is.na(median_impute), median_impute, NA)
  } else if (parameter_value < lower_limit) {
    parameter_value <- lower_limit
  } else if (parameter_value > upper_limit) {
    parameter_value <- upper_limit
  }
  return(parameter_value)
}

# Function to get model
get_model <- function(parameters) {
  if (!is.null(parameters$`NT-proBNP in pg/mL`) && 
      is.null(parameters$`hs-cTnT in ng/L`) && is.null(parameters$`ST2 (ng/mL)`)) {
    model <- Model$MODEL_2
  } else if (!is.null(parameters$`hs-cTnT in ng/L`) && 
             is.null(parameters$`NT-proBNP in pg/mL`) && is.null(parameters$`ST2 (ng/mL)`)) {
    model <- Model$MODEL_3
  } else if (!is.null(parameters$`ST2 (ng/mL)`) && 
             is.null(parameters$`NT-proBNP in pg/mL`) && is.null(parameters$`hs-cTnT in ng/L`)) {
    model <- Model$MODEL_4
  } else if (!is.null(parameters$`NT-proBNP in pg/mL`) && 
             !is.null(parameters$`ST2 (ng/mL)`) && is.null(parameters$`hs-cTnT in ng/L`)) {
    model <- Model$MODEL_5
  } else if (!is.null(parameters$`NT-proBNP in pg/mL`) && 
             !is.null(parameters$`hs-cTnT in ng/L`) && is.null(parameters$`ST2 (ng/mL)`)) {
    model <- Model$MODEL_6
  } else if (!is.null(parameters$`hs-cTnT in ng/L`) && 
             !is.null(parameters$`ST2 (ng/mL)`) && is.null(parameters$`NT-proBNP in pg/mL`)) {
    model <- Model$MODEL_7
  } else if (!is.null(parameters$`NT-proBNP in pg/mL`) && 
             !is.null(parameters$`hs-cTnT in ng/L`) && !is.null(parameters$`ST2 (ng/mL)`)) {
    model <- Model$MODEL_8
  } else {
    model <- Model$MODEL_1
  }
  return(model)
}

# Function to transform new parameters
get_new_parameters <- function(parameters) {
  new_parameters <- parameters
  new_parameters$`NYHA Class` <- ifelse(parameters$`NYHA Class` %in% c(1, 2), 0, 1)
  new_parameters$`Ejection fraction (%)` <- ifelse(parameters$`Ejection fraction (%)` <= 45, 0, 1)
  new_parameters$`log(HF Duration in months)` <- log(parameters$`HF Duration in months`)
  new_parameters$`Furosemide Dose 1` <- ifelse(0 < parameters$`Loop Diuretic Furosemide Dose` && 
                                                 parameters$`Loop Diuretic Furosemide Dose` <= 40, 1, 0)
  new_parameters$`Furosemide Dose 2` <- ifelse(40 < parameters$`Loop Diuretic Furosemide Dose` && 
                                                 parameters$`Loop Diuretic Furosemide Dose` <= 80, 1, 0)
  new_parameters$`Furosemide Dose 3` <- ifelse(parameters$`Loop Diuretic Furosemide Dose` > 80, 1, 0)
  
  if (!is.null(parameters$`NT-proBNP in pg/mL`)) {
    new_parameters$`log(NT-proBNP in pg/mL)` <- ifelse(parameters$`NT-proBNP in pg/mL` == 0, 0, log(parameters$`NT-proBNP in pg/mL`))
  }
  
  if (!is.null(parameters$`hs-cTnT in ng/L`)) {
    new_parameters$`log(hs-cTnT in ng/L)` <- ifelse(parameters$`hs-cTnT in ng/L` == 0, 0, log(parameters$`hs-cTnT in ng/L`))
    new_parameters$`Squared log(hs-cTnT in ng/L)` <- new_parameters$`log(hs-cTnT in ng/L)`^2
  }
  
  if (!is.null(parameters$`ST2 (ng/mL)`)) {
    new_parameters$`ST2_div_10` <- parameters$`ST2 (ng/mL)` / 10
    new_parameters$`Squared ST2_div_10` <- new_parameters$`ST2_div_10`^2
  }
  
  return(new_parameters)
}


# Function to get survival estimate
get_survival_estimate <- function(model, survival_year, model_coefficients) {
  if (survival_year == 1) {
    survival_estimate <- model_coefficients[model, "One_year_survival"]
  } else if (survival_year == 2) {
    survival_estimate <- model_coefficients[model, "Two_year_survival"]
  } else if (survival_year == 3) {
    survival_estimate <- model_coefficients[model, "Three_year_survival"]
  } else if (survival_year == 4) {
    survival_estimate <- model_coefficients[model, "Four_year_survival"]
  } else if (survival_year == 5) {
    survival_estimate <- model_coefficients[model, "Five_year_survival"]
  } else {
    stop("'survival_year' must be between 1 and 5!")
  }
  return(survival_estimate)
}

# Function to calculate scores for model
get_scores <- function(file, model, new_parameters) {
  model_coefficients <- read_csv(file)
  
  coefficients <- model_coefficients %>%
    filter(Variables != "Sum_Product") %>%
    select(all_of(model))
  
  sum_product <- model_coefficients %>%
    filter(Variables == "Sum_Product") %>%
    pull(all_of(model))
  
  # Calculate sum of products
  sum_product_all_parameters <- sum(
    sapply(names(new_parameters), function(param) {
      if (param %in% coefficients$Variables) {
        return(new_parameters[[param]] * coefficients[coefficients$Variables == param, ][[model]])
      } else {
        return(0)
      }
    })
  )
  
  # Calculate scores for each year
  scores <- c()
  for (year in 1:5) {
    survival_estimate <- get_survival_estimate(model, year, model_coefficients)
    score <- (1 - (survival_estimate ^ exp(sum_product_all_parameters - sum_product))) * 100
    scores <- c(scores, round(score, 1))
  }
  
  return(scores)
}

# Function to calculate life expectancy
calc_life_expectancy <- function(model, new_parameters) {
  coefficients_life_expectancy <- "resources/barcelona_hf_v3_life_expectancy_coefficients.csv"
  life_expectancy_limits <- "resources/life_expectancy_limits.csv"
  
  le_coefficients <- read_csv(coefficients_life_expectancy)
  le_limits <- read_csv(life_expectancy_limits)
  
  coefficients <- le_coefficients %>%
    filter(Variables != "Intercept" & Variables != "Gamma Value") %>%
    select(all_of(model))
  
  sum_product_all_parameters <- sum(
    sapply(names(new_parameters), function(param) {
      if (param %in% coefficients$Variables) {
        return(new_parameters[[param]] * coefficients[coefficients$Variables == param, ][[model]])
      } else {
        return(0)
      }
    })
  )
  
  intercept <- le_coefficients %>%
    filter(Variables == "Intercept") %>%
    pull(all_of(model))
  
  gamma_value <- le_coefficients %>%
    filter(Variables == "Gamma Value") %>%
    pull(all_of(model))
  
  le <- exp(intercept + sum_product_all_parameters) * gamma_value
  
  key <- ifelse(new_parameters$Female, "Women", "Men")
  age <- as.integer(new_parameters$`Age (years)`)
  
  if (age %in% le_limits$Age) {
    upper_limit <- le_limits %>%
      filter(Age == age) %>%
      pull(key)
    
    if ((!is.na(upper_limit)) && le > upper_limit) {
      le <- upper_limit
    }
  }
  
  if (le > 20) {
    if ((key == "Men" && age <= 63) || (key == "Women" && age <= 67)) {
      le <- ">20"
    }
  }
  
  return(le)
}

# Function to round life expectance
round_life_expectancy <- function(model, parameters) {
  life_expectancy <- calc_life_expectancy(model, parameters)
  if (!is.na(as.numeric(life_expectancy))) {
    life_expectancy <- round(as.numeric(life_expectancy), 1)
  }
  return(life_expectancy)
}

# Main function to calculate Barcelona HF score
calc_barcelona_hf_score <- function(parameters) {
  all_scores <- list()
  coefficients_death_file <- "resources/barcelona_hf_v3_death_coefficients.csv"
  coefficients_hosp_file <- "resources/barcelona_hf_v3_hosp_coefficients.csv"
  coefficients_hosp_death_file <- "resources/barcelona_hf_v3_hosp_death_coefficients.csv"
  
  model <- get_model(parameters)
  
  # Check values against min, max, and median
  for (param in rownames(MIN_MAX_MEDIAN)) {
    if (param %in% names(parameters)) {
      parameters[[param]] <- check_values(parameters[[param]], param, MIN_MAX_MEDIAN)
    }
  }
  
  new_parameters <- get_new_parameters(parameters)
  endpoints_without_biomarkers <- list()
  endpoints_with_biomarkers <- list()
  
  for (file in c(coefficients_death_file, coefficients_hosp_file, coefficients_hosp_death_file)) {
    suffix <- sub(".*v3_", "", sub("_coefficients\\.csv", "", file))
    
    scores_without_biomarkers <- get_scores(file, Model$MODEL_1, new_parameters)
    endpoints_without_biomarkers[[suffix]] <- scores_without_biomarkers
    
    if (model != Model$MODEL_1) {
      scores_with_biomarkers <- get_scores(file, model, new_parameters)
      endpoints_with_biomarkers[[suffix]] <- scores_with_biomarkers
    }
    
    if (file == coefficients_death_file) {
      le_without_biomarkers <- round_life_expectancy(Model$MODEL_1, new_parameters)
      endpoints_without_biomarkers$life_expectancy <- as.character(le_without_biomarkers)
      
      if (model != Model$MODEL_1) {
        le_with_biomarkers <- round_life_expectancy(model, new_parameters)
        endpoints_with_biomarkers$life_expectancy <- as.character(le_with_biomarkers)
      }
    }
  }
  
  all_scores$without_biomarkers <- endpoints_without_biomarkers
  if (model != Model$MODEL_1) {
    all_scores$with_biomarkers <- endpoints_with_biomarkers
  }
  
  return(all_scores)
}

# Example call to calculate the Barcelona HF score
parameters <- list(
  `Age (years)` = 60,
  `Female` = TRUE,
  `NYHA Class` = 3,
  `Ejection fraction (%)` = 35,
  `Sodium (mmol/L)` = 140,
  `eGFR in mL/min/1.73mÂ²` = 60,
  `Hemoglobin (g/dL)` = 13.5,
  `Loop Diuretic Furosemide Dose` = 40,
  `Statin` = TRUE,
  `ACEi/ARB` = TRUE,
  `Betablockers` = TRUE,
  `HF Duration in months` = 24,
  `Diabetes Mellitus` = FALSE,
  `Hospitalisation Prev. Year` = 1,
  `MRA` = TRUE,
  `ICD` = FALSE,
  `CRT` = FALSE,
  `ARNI` = FALSE,
  `NT-proBNP in pg/mL` = 1200,
  `hs-cTnT in ng/L` = NA,
  `ST2 (ng/mL)` = NA,
  `SGLT2i` = TRUE
)

parameters2 <- list(
  `Age (years)` = 63,
  `Female` = FALSE,c <- fuc <- fuc <- fu
  `NYHA Class` = 11,
  `Ejection fraction (%)` = 13,
  `eGFR in mL/min/1.73mÂ²` = 6,
  `Hemoglobin (g/dL)` = 12,
  `Loop Diuretic Furosemide Dose` = 20,
  `Statin` = FALSE,
  `ACEi/ARB` = FALSE,
  `Betablocker` = FALSE,
  `HF Duration in months` = 24,
  `Diabetis Mellitus` = FALSE,
  `Hospitalisation Prev. Year` = FALSE,
  `MRA` = FALSE,
  `ICD` = FALSE,
  `CRT` = FALSE,
  `ARNI` = FALSE,
  `NT-proBNP in pg/mL` = 1000,
  `hs-cTnT in ng/L` = 1.112,
  `ST2 (ng/mL)` = 4,
  `SGLT2i` = FALSE
)

scores <- calc_barcelona_hf_score(parameters)
print(scores)

