`Age in years` = 25,  # Invalid (below range)
Male = "yes",  # Invalid (should be TRUE/FALSE)
`Current smoker` = FALSE,
`Systolic blood pressure in mmHg` = 120,
Diabetic = FALSE,
`History of coronary artery disease` = TRUE,
`History of cerebrovascular disease` = FALSE,
`Abdominal aortic aneurysm` = FALSE,
`Peripheral artery disease` = FALSE,
`Years since first diagnosis of vascular disease` = 5,
`HDL-cholesterol in mmol/L` = 3.0,  # Invalid (above range)
`Total cholesterol in mmol/L` = 4.0,
`eGFR in mL/min/1.73m²` = 90.0,
`hs-CRP in mg/dL` = 1.0,
`Antithrombotic treatment` = TRUE
)
# Validate the parameters and print issues
validation_results <- validate_parameters(params)
print(validation_results)
# Define the validation functions for each parameter type
validate_range <- function(value, min, max, param_name) {
if (!is.numeric(value)) {
return(paste(param_name, "must be numeric."))
} else if (value < min || value > max) {
return(paste(param_name, "must be between", min, "and", max, "."))
}
return(TRUE)
}
validate_bool <- function(value, param_name) {
if (!is.logical(value) || length(value) != 1) {
return(paste(param_name, "must be a single boolean (TRUE or FALSE)."))
}
return(TRUE)
}
# Define a main validation function for the parameters
validate_parameters <- function(params) {
validation_results <- list(
`Age in years` = validate_range(params$`Age in years`, 30, 90, "Age in years"),
`Male` = validate_bool(params$Male, "Male"),
`Current smoker` = validate_bool(params$`Current smoker`, "Current smoker"),
`Systolic blood pressure in mmHg` = validate_range(params$`Systolic blood pressure in mmHg`, 70, 200, "Systolic blood pressure in mmHg"),
`Diabetic` = validate_bool(params$Diabetic, "Diabetic"),
`History of coronary artery disease` = validate_bool(params$`History of coronary artery disease`, "History of coronary artery disease"),
`History of cerebrovascular disease` = validate_bool(params$`History of cerebrovascular disease`, "History of cerebrovascular disease"),
`Abdominal aortic aneurysm` = validate_bool(params$`Abdominal aortic aneurysm`, "Abdominal aortic aneurysm"),
`Peripheral artery disease` = validate_bool(params$`Peripheral artery disease`, "Peripheral artery disease"),
`Years since first diagnosis of vascular disease` = validate_range(params$`Years since first diagnosis of vascular disease`, 0, 30, "Years since first diagnosis of vascular disease"),
`HDL-cholesterol in mmol/L` = validate_range(params$`HDL-cholesterol in mmol/L`, 0.6, 2.5, "HDL-cholesterol in mmol/L"),
`Total cholesterol in mmol/L` = validate_range(params$`Total cholesterol in mmol/L`, 2.5, 8.0, "Total cholesterol in mmol/L"),
`eGFR in mL/min/1.73m²` = validate_range(params$`eGFR in mL/min/1.73m²`, 21.60551, 178.39297, "eGFR in mL/min/1.73m²"),
`hs-CRP in mg/dL` = validate_range(params$`hs-CRP in mg/dL`, 0.1, 15.0, "hs-CRP in mg/dL"),
`Antithrombotic treatment` = validate_bool(params$`Antithrombotic treatment`, "Antithrombotic treatment")
)
# Collect issues as non-TRUE results
issues <- Filter(function(x) x != TRUE, validation_results)
if (length(issues) == 0) {
return("All parameters are valid.")
} else {
return(issues)
}
}
# Example usage with intentional errors
params <- list(
`Age in years` = 25,  # Invalid (below range)
Male = "yes",  # Invalid (should be TRUE/FALSE)
`Current smoker` = FALSE,
`Systolic blood pressure in mmHg` = 120,
Diabetic = FALSE,
`History of coronary artery disease` = TRUE,
`History of cerebrovascular disease` = FALSE,
`Abdominal aortic aneurysm` = FALSE,
`Peripheral artery disease` = FALSE,
`Years since first diagnosis of vascular disease` = 5,
`HDL-cholesterol in mmol/L` = 3.0,  # Invalid (above range)
`Total cholesterol in mmol/L` = 4.0,
`eGFR in mL/min/1.73m²` = 90.0,
`hs-CRP in mg/dL` = 1.0,
`Antithrombotic treatment` = TRUE
)
# Validate the parameters and print issues
validation_results <- validate_parameters(params)
print(validation_results)
source('smart.R')
params <- list2env(parameters)
params <- list(
`Age in years` = 25,  # Invalid (below range)
Male = "yes",  # Invalid (should be TRUE/FALSE)
`Current smoker` = FALSE,
`Systolic blood pressure in mmHg` = 120,
Diabetic = FALSE,
`History of coronary artery disease` = TRUE,
`History of cerebrovascular disease` = FALSE,
`Abdominal aortic aneurysm` = FALSE,
`Peripheral artery disease` = FALSE,
`Years since first diagnosis of vascular disease` = 5,
`HDL-cholesterol in mmol/L` = 3.0,  # Invalid (above range)
`Total cholesterol in mmol/L` = 4.0,
`eGFR in mL/min/1.73m²` = 90.0,
`hs-CRP in mg/dL` = 1.0,
`Antithrombotic treatment` = TRUE
)
# Validate the parameters and print issues
validation_results <- validate_parameters(params)
print(validation_results)
source('smart.R')
params <- list2env(parameters)
wrong_params <- list(
`Age in years` = 25,  # Invalid (below range)
Male = "yes",  # Invalid (should be TRUE/FALSE)
`Current smoker` = FALSE,
`Systolic blood pressure in mmHg` = 120,
Diabetic = FALSE,
`History of coronary artery disease` = TRUE,
`History of cerebrovascular disease` = FALSE,
`Abdominal aortic aneurysm` = FALSE,
`Peripheral artery disease` = FALSE,
`Years since first diagnosis of vascular disease` = 5,
`HDL-cholesterol in mmol/L` = 3.0,  # Invalid (above range)
`Total cholesterol in mmol/L` = 4.0,
`eGFR in mL/min/1.73m²` = 90.0,
`hs-CRP in mg/dL` = 1.0,
`Antithrombotic treatment` = TRUE
)
calc_smart_score(params)
source('smart.R')
wrong_params <- list2env(parameters)
wrong_params$`Age in years` = 25,  # Invalid (below range)
correct_params <- list2env(parameters)
correct_params$`Age in years` = 45,  # Within the valid range of 30-90
calc_smart_score(correct_params)
calc_smart_score(correct_params)
source('smart.R')
wrong_params <- list2env(parameters)
wrong_params$`Age in years` = 25,  # Invalid (below range)
correct_params <- list2env(parameters)
correct_params$`Age in years` = 45,  # Within the valid range of 30-90
calc_smart_score(wrong_params)
calc_smart_score(correct_params)
correct_params <- list2env(parameters)
correct_params$`Age in years` = 45,  # Within the valid range of 30-90
calc_smart_score(wrong_params)
calc_smart_score(correct_params)
source('smart.R')
correct_params <- list2env(parameters)
correct_params$`Age in years` = 45,  # Within the valid range of 30-90
calc_smart_score(correct_params)
correct_params
show(correct_params)
print(correct_params)
print(correct_params$`Age in years`)
source('smart.R')
correct_params <- list2env(parameters_draft)
correct_params$`Age in years` = 45,  # Within the valid range of 30-90
calc_smart_score(correct_params)
print(correct_params$`Age in years`)
source('smart.R')
correct_params <- list2env(parameters_draft)
correct_params$`Age in years` <- 45,  # Within the valid range of 30-90
calc_smart_score(correct_params)
print(correct_params$`Age in years`)
correct_params$`Age in years` <- 45,  # Within the valid range of 30-90
print(correct_params$`Age in years`)
correct_params$`Age in years` <- 45  # Within the valid range of 30-90
correct_params$Male <- TRUE  # Boolean value (TRUE or FALSE)
correct_params$`Current smoker` <- FALSE  # Boolean value
correct_params$`Systolic blood pressure in mmHg` <- 120  # Within the valid range of 70-200
correct_params$Diabetic <- FALSE  # Boolean value
correct_params$`History of coronary artery disease` <- TRUE  # Boolean value
correct_params$`History of cerebrovascular disease` <- FALSE  # Boolean value
correct_params$`Abdominal aortic aneurysm` <- FALSE  # Boolean value
correct_params$`Peripheral artery disease` <- FALSE  # Boolean value
correct_params$`Years since first diagnosis of vascular disease` <- 10  # Within the valid range of 0-30
correct_params$`HDL-cholesterol in mmol/L` <- 1.5  # Within the valid range of 0.6-2.5
correct_params$`Total cholesterol in mmol/L` <- 5.0  # Within the valid range of 2.5-8.0
correct_params$`eGFR in mL/min/1.73m²` <- 90.0  # Within the valid range of 21.60551-178.39297
correct_params$`hs-CRP in mg/dL` <- 1.0  # Within the valid range of 0.1-15.0
correct_params$`Antithrombotic treatment` <- TRUE  # Boolean value
calc_smart_score(correct_params)
print(correct_params$`Age in years`)
calc_smart_score(correct_params)
source('smart.R')
correct_params <- list2env(parameters_draft)
correct_params <- list2env(parameters)
correct_params$`Age in years` <- 45  # Within the valid range of 30-90
correct_params$Male <- TRUE  # Boolean value (TRUE or FALSE)
correct_params$`Current smoker` <- FALSE  # Boolean value
correct_params$`Systolic blood pressure in mmHg` <- 120  # Within the valid range of 70-200
correct_params$Diabetic <- FALSE  # Boolean value
correct_params$`History of coronary artery disease` <- TRUE  # Boolean value
correct_params$`History of cerebrovascular disease` <- FALSE  # Boolean value
correct_params$`Abdominal aortic aneurysm` <- FALSE  # Boolean value
correct_params$`Peripheral artery disease` <- FALSE  # Boolean value
correct_params$`Years since first diagnosis of vascular disease` <- 10  # Within the valid range of 0-30
correct_params$`HDL-cholesterol in mmol/L` <- 1.5  # Within the valid range of 0.6-2.5
correct_params$`Total cholesterol in mmol/L` <- 5.0  # Within the valid range of 2.5-8.0
correct_params$`eGFR in mL/min/1.73m²` <- 90.0  # Within the valid range of 21.60551-178.39297
correct_params$`hs-CRP in mg/dL` <- 1.0  # Within the valid range of 0.1-15.0
correct_params$`Antithrombotic treatment` <- TRUE  # Boolean value
calc_smart_score(correct_params)
print(correct_params$`Age in years`)
correct_params$`Age in years` <- 20  # Within the valid range of 30-90
calc_smart_score(correct_params)
print(correct_params$`Age in years`)
correct_params$`Age in years` <- 20  # Within the valid range of 30-90
correct_params$Male <- TRUE  # Boolean value (TRUE or FALSE)
correct_params$`Current smoker` <- FALSE  # Boolean value
correct_params$`Systolic blood pressure in mmHg` <- 120  # Within the valid range of 70-200
correct_params$Diabetic <- FALSE  # Boolean value
correct_params$`History of coronary artery disease` <- TRUE  # Boolean value
correct_params$`History of cerebrovascular disease` <- FALSE  # Boolean value
correct_params$`Abdominal aortic aneurysm` <- FALSE  # Boolean value
correct_params$`Peripheral artery disease` <- FALSE  # Boolean value
correct_params$`Years since first diagnosis of vascular disease` <- 10  # Within the valid range of 0-30
correct_params$`HDL-cholesterol in mmol/L` <- 1.5  # Within the valid range of 0.6-2.5
correct_params$`Total cholesterol in mmol/L` <- 5.0  # Within the valid range of 2.5-8.0
correct_params$`eGFR in mL/min/1.73m²` <- 90.0  # Within the valid range of 21.60551-178.39297
correct_params$`hs-CRP in mg/dL` <- 1.0  # Within the valid range of 0.1-15.0
correct_params$`Antithrombotic treatment` <- TRUE  # Boolean value
calc_smart_score(correct_params)
print(correct_params$`Age in years`)
source('smart.R')
correct_params <- list2env(parameters)
correct_params$`Age in years` <- 20  # Within the valid range of 30-90
correct_params$Male <- TRUE  # Boolean value (TRUE or FALSE)
correct_params$`Current smoker` <- FALSE  # Boolean value
correct_params$`Systolic blood pressure in mmHg` <- 120  # Within the valid range of 70-200
correct_params$Diabetic <- FALSE  # Boolean value
correct_params$`History of coronary artery disease` <- TRUE  # Boolean value
correct_params$`History of cerebrovascular disease` <- FALSE  # Boolean value
correct_params$`Abdominal aortic aneurysm` <- FALSE  # Boolean value
correct_params$`Peripheral artery disease` <- FALSE  # Boolean value
correct_params$`Years since first diagnosis of vascular disease` <- 10  # Within the valid range of 0-30
correct_params$`HDL-cholesterol in mmol/L` <- 1.5  # Within the valid range of 0.6-2.5
correct_params$`Total cholesterol in mmol/L` <- 5.0  # Within the valid range of 2.5-8.0
correct_params$`eGFR in mL/min/1.73m²` <- 90.0  # Within the valid range of 21.60551-178.39297
correct_params$`hs-CRP in mg/dL` <- 1.0  # Within the valid range of 0.1-15.0
correct_params$`Antithrombotic treatment` <- TRUE  # Boolean value
calc_smart_score(correct_params)
print(correct_params$`Age in years`)
correct_params$Male <- 123# Boolean value (TRUE or FALSE)
correct_params$Male <- 123# Boolean value (TRUE or FALSE)
calc_smart_score(correct_params)
validation_results(correct_params)
validate_parameters(correct_params)
run_score_if_valid(correct_params)
correct_params$`Age in years` <- 30  # Within the valid range of 30-90
correct_params$Male <- TRUE # Boolean value (TRUE or FALSE)
run_score_if_valid(correct_params)
run_score_if_valid(correct_params)
run_score_if_valid(correct_params)
print(correct_params$`Age in years`)
# Function to validate and run the score calculation if validation passes
run_smart_score_if_valid <- function(params) {
validation_results <- validate_parameters(params)
if (isTRUE(validation_results)) {
# Validation passed, run score function
score_value <- calc_smart_score(params)
cat("Score:", score_value, "\n")
} else {
# Validation failed, print errors
cat("Validation Errors:\n")
print(validation_results)
}
}
run_smart_score_if_valid(correct_params)
print(correct_params$`Age in years`)
run_smart_score_if_valid(wrong_params)
wrong_params$`Age in years` <- 30  # Within the valid range of 30-90
wrong_params$Male <- TRUE # Boolean value (TRUE or FALSE)
wrong_params$`Current smoker` <- FALSE  # Boolean value
wrong_params$`Systolic blood pressure in mmHg` <- 120  # Within the valid range of 70-200
wrong_params$Diabetic <- FALSE  # Boolean value
wrong_params$`History of coronary artery disease` <- TRUE  # Boolean value
wrong_params$`History of cerebrovascular disease` <- FALSE  # Boolean value
wrong_params$`Abdominal aortic aneurysm` <- FALSE  # Boolean value
wrong_params$`Peripheral artery disease` <- FALSE  # Boolean value
wrong_params$`Years since first diagnosis of vascular disease` <- 10  # Within the valid range of 0-30
wrong_params$`HDL-cholesterol in mmol/L` <- 1.5  # Within the valid range of 0.6-2.5
wrong_params$`Total cholesterol in mmol/L` <- 5.0  # Within the valid range of 2.5-8.0
wrong_params$`eGFR in mL/min/1.73m²` <- 90.0  # Within the valid range of 21.60551-178.39297
wrong_params$`hs-CRP in mg/dL` <- 1.0  # Within the valid range of 0.1-15.0
wrong_params$`Antithrombotic treatment` <- TRUE  # Booleanwrong
run_smart_score_if_valid(correct_params)
run_smart_score_if_valid(wrong_params)
wrong_params$`Age in years` <- 20  # Within the valid range of 30-90
wrong_params$`Systolic blood pressure in mmHg` <- 302  # Within the valid range of 70-200
wrong_params$`Antithrombotic treatment` <- 342  # Booleanwrong
wrong_params$`Age in years` <- 20  # Within the valid range of 30-90
wrong_params$Male <- TRUE # Boolean value (TRUE or FALSE)
wrong_params$`Current smoker` <- FALSE  # Boolean value
wrong_params$`Systolic blood pressure in mmHg` <- 302  # Within the valid range of 70-200
wrong_params$Diabetic <- FALSE  # Boolean value
wrong_params$`History of coronary artery disease` <- TRUE  # Boolean value
wrong_params$`History of cerebrovascular disease` <- FALSE  # Boolean value
wrong_params$`Abdominal aortic aneurysm` <- FALSE  # Boolean value
wrong_params$`Peripheral artery disease` <- FALSE  # Boolean value
wrong_params$`Years since first diagnosis of vascular disease` <- 31 # Within the valid range of 0-30
wrong_params$`HDL-cholesterol in mmol/L` <- 0.5  # Within the valid range of 0.6-2.5
wrong_params$`Total cholesterol in mmol/L` <- 2  # Within the valid range of 2.5-8.0
wrong_params$`eGFR in mL/min/1.73m²` <- 90.0  # Within the valid range of 21.60551-178.39297
wrong_params$`hs-CRP in mg/dL` <- 1.0  # Within the valid range of 0.1-15.0
wrong_params$`Antithrombotic treatment` <- 342  # Booleanwrong
run_smart_score_if_valid(correct_params)
run_smart_score_if_valid(wrong_params)
correct_params$Male <- 1 # Boolean value (TRUE or FALSE)
calc_smart_score(correct_params)
library(dplyr)
library(readr)
library(purrr)
# Enum-like representation in R
Model <- list(
MODEL_1 = "Basic Clinical Model",
MODEL_2 = "Basic model with NT-proBNP",
MODEL_3 = "Basic model with hs-cTnT",
MODEL_4 = "Basic model with ST2",
MODEL_5 = "Basic model with NT-proBNP and ST2",
MODEL_6 = "Basic model with NT-proBNP and hs-cTnT",
MODEL_7 = "Basic model with hs-cTNT and ST2",
MODEL_8 = "Basic model with NT-proBNP + hs-cTNT + ST2"
)
# Defining min-max-median values
MIN_MAX_MEDIAN <- tibble(
lower_limit = c(35, 11, 130, 6.4, 8.8, 21.5017, 3, 18.089, 0.5, 0),
upper_limit = c(88, 71, 147, 109.7, 17.1, 34800.59, 265.45, 157.074, 246.948, 8),
median_impute = c(70.3, 34, 139, 51.2, 12.9, 1361.5, 22.6, 38.1, 27, 0)
) %>%
mutate(parameter = c('Age (years)', 'Ejection fraction (%)', 'Sodium (mmol/L)',
'eGFR in mL/min/1.73m²', 'Hemoglobin (g/dL)', 'NT-proBNP in pg/mL',
'hs-cTnT in ng/L', 'ST2 (ng/mL)', 'HF Duration in months',
'Hospitalisation Prev. Year')) %>%
column_to_rownames('parameter')
# Enum-like representation in R
Model <- list(
MODEL_1 = "Basic Clinical Model",
MODEL_2 = "Basic model with NT-proBNP",
MODEL_3 = "Basic model with hs-cTnT",
MODEL_4 = "Basic model with ST2",
MODEL_5 = "Basic model with NT-proBNP and ST2",
MODEL_6 = "Basic model with NT-proBNP and hs-cTnT",
MODEL_7 = "Basic model with hs-cTNT and ST2",
MODEL_8 = "Basic model with NT-proBNP + hs-cTNT + ST2"
)
# Defining min-max-median values
MIN_MAX_MEDIAN <- tibble(
lower_limit = c(35, 11, 130, 6.4, 8.8, 21.5017, 3, 18.089, 0.5, 0),
upper_limit = c(88, 71, 147, 109.7, 17.1, 34800.59, 265.45, 157.074, 246.948, 8),
median_impute = c(70.3, 34, 139, 51.2, 12.9, 1361.5, 22.6, 38.1, 27, 0)
) %>%
mutate(parameter = c('Age (years)', 'Ejection fraction (%)', 'Sodium (mmol/L)',
'eGFR in mL/min/1.73m²', 'Hemoglobin (g/dL)', 'NT-proBNP in pg/mL',
'hs-cTnT in ng/L', 'ST2 (ng/mL)', 'HF Duration in months',
'Hospitalisation Prev. Year')) %>%
column_to_rownames('parameter')
# Defining min-max-median values
MIN_MAX_MEDIAN <- tibble(
lower_limit = c(35, 11, 130, 6.4, 8.8, 21.5017, 3, 18.089, 0.5, 0),
upper_limit = c(88, 71, 147, 109.7, 17.1, 34800.59, 265.45, 157.074, 246.948, 8),
median_impute = c(70.3, 34, 139, 51.2, 12.9, 1361.5, 22.6, 38.1, 27, 0)
) %>%
mutate(parameter = c('Age (years)', 'Ejection fraction (%)', 'Sodium (mmol/L)',
'eGFR in mL/min/1.73m²', 'Hemoglobin (g/dL)', 'NT-proBNP in pg/mL',
'hs-cTnT in ng/L', 'ST2 (ng/mL)', 'HF Duration in months',
'Hospitalisation Prev. Year')) %>%
column_to_rownames('parameter')
# Function to check values
check_values <- function(parameter_value, parameter_name, min_max_median) {
lower_limit <- min_max_median[parameter_name, "lower_limit"]
upper_limit <- min_max_median[parameter_name, "upper_limit"]
median_impute <- min_max_median[parameter_name, "median_impute"]
if (is.na(parameter_value)) {
parameter_value <- ifelse(!is.na(median_impute), median_impute, NA)
} else if (parameter_value < lower_limit) {
parameter_value <- lower_limit
} else if (parameter_value > upper_limit) {
parameter_value <- upper_limit
}
return(parameter_value)
}
library(dplyr)
library(dplyr)
library(readr)
library(purrr)
# Enum-like representation in R
Model <- list(
MODEL_1 = "Basic Clinical Model",
MODEL_2 = "Basic model with NT-proBNP",
MODEL_3 = "Basic model with hs-cTnT",
MODEL_4 = "Basic model with ST2",
MODEL_5 = "Basic model with NT-proBNP and ST2",
MODEL_6 = "Basic model with NT-proBNP and hs-cTnT",
MODEL_7 = "Basic model with hs-cTNT and ST2",
MODEL_8 = "Basic model with NT-proBNP + hs-cTNT + ST2"
)
# Defining min-max-median values
MIN_MAX_MEDIAN <- tibble(
lower_limit = c(35, 11, 130, 6.4, 8.8, 21.5017, 3, 18.089, 0.5, 0),
upper_limit = c(88, 71, 147, 109.7, 17.1, 34800.59, 265.45, 157.074, 246.948, 8),
median_impute = c(70.3, 34, 139, 51.2, 12.9, 1361.5, 22.6, 38.1, 27, 0)
) %>%
mutate(parameter = c('Age (years)', 'Ejection fraction (%)', 'Sodium (mmol/L)',
'eGFR in mL/min/1.73m²', 'Hemoglobin (g/dL)', 'NT-proBNP in pg/mL',
'hs-cTnT in ng/L', 'ST2 (ng/mL)', 'HF Duration in months',
'Hospitalisation Prev. Year')) %>%
column_to_rownames('parameter')
# Function to check values
check_values <- function(parameter_value, parameter_name, min_max_median) {
lower_limit <- min_max_median[parameter_name, "lower_limit"]
upper_limit <- min_max_median[parameter_name, "upper_limit"]
median_impute <- min_max_median[parameter_name, "median_impute"]
if (is.na(parameter_value)) {
parameter_value <- ifelse(!is.na(median_impute), median_impute, NA)
} else if (parameter_value < lower_limit) {
parameter_value <- lower_limit
} else if (parameter_value > upper_limit) {
parameter_value <- upper_limit
}
return(parameter_value)
}
# Defining min-max-median values
MIN_MAX_MEDIAN <- tibble(
lower_limit = c(35, 11, 130, 6.4, 8.8, 21.5017, 3, 18.089, 0.5, 0),
upper_limit = c(88, 71, 147, 109.7, 17.1, 34800.59, 265.45, 157.074, 246.948, 8),
median_impute = c(70.3, 34, 139, 51.2, 12.9, 1361.5, 22.6, 38.1, 27, 0)
) %>%
mutate(parameter = c('Age (years)', 'Ejection fraction (%)', 'Sodium (mmol/L)',
'eGFR in mL/min/1.73m²', 'Hemoglobin (g/dL)', 'NT-proBNP in pg/mL',
'hs-cTnT in ng/L', 'ST2 (ng/mL)', 'HF Duration in months',
'Hospitalisation Prev. Year')) %>%
column_to_rownames('parameter')
library(dplyr)
library(readr)
library(purrr)
# Enum-like representation in R
Model <- list(
MODEL_1 = "Basic Clinical Model",
MODEL_2 = "Basic model with NT-proBNP",
MODEL_3 = "Basic model with hs-cTnT",
MODEL_4 = "Basic model with ST2",
MODEL_5 = "Basic model with NT-proBNP and ST2",
MODEL_6 = "Basic model with NT-proBNP and hs-cTnT",
MODEL_7 = "Basic model with hs-cTNT and ST2",
MODEL_8 = "Basic model with NT-proBNP + hs-cTNT + ST2"
)
# Defining min-max-median values
MIN_MAX_MEDIAN <- tibble(
lower_limit = c(35, 11, 130, 6.4, 8.8, 21.5017, 3, 18.089, 0.5, 0),
upper_limit = c(88, 71, 147, 109.7, 17.1, 34800.59, 265.45, 157.074, 246.948, 8),
median_impute = c(70.3, 34, 139, 51.2, 12.9, 1361.5, 22.6, 38.1, 27, 0)
) %>%
mutate(parameter = c('Age (years)', 'Ejection fraction (%)', 'Sodium (mmol/L)',
'eGFR in mL/min/1.73m²', 'Hemoglobin (g/dL)', 'NT-proBNP in pg/mL',
'hs-cTnT in ng/L', 'ST2 (ng/mL)', 'HF Duration in months',
'Hospitalisation Prev. Year')) %>%
column_to_rownames('parameter')
# Function to check values
check_values <- function(parameter_value, parameter_name, min_max_median) {
lower_limit <- min_max_median[parameter_name, "lower_limit"]
upper_limit <- min_max_median[parameter_name, "upper_limit"]
median_impute <- min_max_median[parameter_name, "median_impute"]
if (is.na(parameter_value)) {
parameter_value <- ifelse(!is.na(median_impute), median_impute, NA)
} else if (parameter_value < lower_limit) {
parameter_value <- lower_limit
} else if (parameter_value > upper_limit) {
parameter_value <- upper_limit
}
return(parameter_value)
}
library(dplyr)
library(readr)
library(purrr)
# Enum-like representation in R
Model <- list(
MODEL_1 = "Basic Clinical Model",
MODEL_2 = "Basic model with NT-proBNP",
MODEL_3 = "Basic model with hs-cTnT",
MODEL_4 = "Basic model with ST2",
MODEL_5 = "Basic model with NT-proBNP and ST2",
MODEL_6 = "Basic model with NT-proBNP and hs-cTnT",
MODEL_7 = "Basic model with hs-cTNT and ST2",
MODEL_8 = "Basic model with NT-proBNP + hs-cTNT + ST2"
)
# Defining min-max-median values
MIN_MAX_MEDIAN <- tibble(
lower_limit = c(35, 11, 130, 6.4, 8.8, 21.5017, 3, 18.089, 0.5, 0),
upper_limit = c(88, 71, 147, 109.7, 17.1, 34800.59, 265.45, 157.074, 246.948, 8),
median_impute = c(70.3, 34, 139, 51.2, 12.9, 1361.5, 22.6, 38.1, 27, 0)
) %>%
mutate(parameter = c('Age (years)', 'Ejection fraction (%)', 'Sodium (mmol/L)',
'eGFR in mL/min/1.73m²', 'Hemoglobin (g/dL)', 'NT-proBNP in pg/mL',
'hs-cTnT in ng/L', 'ST2 (ng/mL)', 'HF Duration in months',
'Hospitalisation Prev. Year')) %>%
column_to_rownames('parameter')
insrall dplyr::column_to_rownames
install dplyr::column_to_rownames
library(tibble)
update.packages(ask = FALSE)
update.packages(ask = FALSE)
library(tibble)
remove.packages("tibble")
install.packages("tibble")
library(tibble)
remove.packages("tibble")
remove.packages("tibble", lib = "C:/Users/krasniqierenik/AppData/Local/R/win-library/4.4")
library(tibble)
library(dplyr)
library(purrr)
install.packages("tibble")
library(purrr)
library(tibble)
library(purrr)
library(tibble)
